name: CI/CD - Docker + Nginx

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests
      run: |
        pip install pytest
        pytest

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to EC2
      run: |
        scp -o StrictHostKeyChecking=no nginx/minigdrive.conf ubuntu@${{ secrets.INSTANCE_IP }}:/tmp/minigdrive.conf

        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
          set -e
          echo "[+] Updating packages..."
          sudo apt-get update -y

          # Install Docker if missing
          if ! command -v docker &> /dev/null; then
            echo "[+] Installing Docker..."
            sudo apt-get install -y docker.io
          fi

          # Install Docker Compose v2 if missing
          if ! docker compose version &> /dev/null; then
            echo "[+] Installing Docker Compose v2..."
            sudo apt-get install -y docker-compose-plugin
          fi

          # Install Nginx if missing
          if ! command -v nginx &> /dev/null; then
            echo "[+] Installing Nginx..."
            sudo apt-get install -y nginx
          fi

          # Add ubuntu user to docker group
          sudo usermod -aG docker ubuntu || true

          echo "[+] Deploying application..."

          # Clone or update code
          if [ ! -d "MiniGDrive" ]; then
            git clone https://github.com/Aswin-AR5055/MiniGDrive.git MiniGDrive
          fi
          cd MiniGDrive
          git fetch --all
          git reset --hard origin/master

          # Copy necessary config files
          cd ..
          mkdir -p monitoring
          cp MiniGDrive/docker-compose.yml docker-compose.yml || true
          cp MiniGDrive/prometheus/prometheus.yml prometheus.yml || true

          # Stop old containers
          sudo docker compose down || true

          # Start new stack
          GF_USER=${{ secrets.GF_USER }} \
          GF_PASS=${{ secrets.GF_PASSWORD }} \
          SECRET_KEY=${{ secrets.SECRET_KEY }} sudo docker compose up -d --build

          echo "[+] Deployment complete. Running containers:"
          sudo docker ps
        EOF
