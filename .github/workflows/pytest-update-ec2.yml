name: CI/CD - Docker + Nginx + Prometheus/Grafana

on:
  push:
    branches:
      - testbranch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.INSTANCE_IP2 }} << EOF
        set -e

        echo "[+] Updating packages..."
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends git curl wget software-properties-common apt-transport-https ca-certificates

        echo "[+] Installing Docker if missing..."
        if ! command -v docker &> /dev/null; then
          sudo apt-get install -y docker.io
          sudo usermod -aG docker ubuntu
        fi

        echo "[+] Installing Docker Compose if missing..."
        if ! docker-compose version &> /dev/null; then
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.1/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi

        echo "[+] Adding Grafana repo & key..."
        wget -q -O - https://packages.grafana.com/gpg.key | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/grafana-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/grafana-archive-keyring.gpg] https://packages.grafana.com/oss/deb stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
        sudo apt-get update -y

        echo "[+] Installing Nginx if missing..."
        if ! command -v nginx &> /dev/null; then
          sudo apt-get install -y nginx
        fi

        echo "[+] Cloning or updating repo..."
        if [ ! -d "MiniGDrive" ]; then
          git clone https://github.com/Aswin-AR5055/MiniGDrive.git MiniGDrive
        fi
        cd MiniGDrive
        git fetch --all
        git reset --hard origin/master
        cd ..

        echo "[+] Setting up Nginx config..."
        if [ -f "MiniGDrive/nginx/minigdrive.conf" ]; then
          sudo cp MiniGDrive/nginx/minigdrive.conf /etc/nginx/sites-available/minigdrive
          sudo ln -sf /etc/nginx/sites-available/minigdrive /etc/nginx/sites-enabled/minigdrive
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t
          sudo systemctl restart nginx
        else
          echo "[!] Nginx config not found, skipping..."
        fi

        echo "[+] Setting up Prometheus..."
        sudo mkdir -p /home/ubuntu/prometheus
        sudo rm -rf /home/ubuntu/prometheus/prometheus.yml
        sudo cp MiniGDrive/prometheus/prometheus.yml /home/ubuntu/prometheus/prometheus.yml
        sudo chmod 644 /home/ubuntu/prometheus/prometheus.yml

        echo "[+] Setting up GDrive data volumes..."
        sudo mkdir -p /home/ubuntu/minigdrive_data/uploads
        sudo mkdir -p /home/ubuntu/minigdrive_data/trash
        sudo mkdir -p /home/ubuntu/minigdrive_data/storage
        sudo mkdir -p /home/ubuntu/minigdrive_data/profiles

        echo "[+] Writing .env file automatically..."
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > /home/ubuntu/minigdrive_env
        echo "GF_USER=${{ secrets.GF_USER }}" >> /home/ubuntu/minigdrive_env
        echo "GF_PASS=${{ secrets.GF_PASSWORD }}" >> /home/ubuntu/minigdrive_env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> /home/ubuntu/minigdrive_env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> /home/ubuntu/minigdrive_env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> /home/ubuntu/minigdrive_env
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> /home/ubuntu/minigdrive_env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /home/ubuntu/minigdrive_env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /home/ubuntu/minigdrive_env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> /home/ubuntu/minigdrive_env
        echo "BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> /home/ubuntu/minigdrive_env
        sudo chmod 600 /home/ubuntu/minigdrive_env

        echo "[+] Copying Docker Compose file..."
        cp MiniGDrive/docker-compose.yml docker-compose.yml

        echo "[+] Stopping old containers if any..."
        sudo docker-compose down || true

        echo "[+] Starting new stack with Docker Compose using .env file..."
        sudo docker-compose --env-file /home/ubuntu/minigdrive_env up -d --build

        echo "[+] Deployment complete. Running containers:"
        sudo docker ps
        EOF
